class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def add_two_numbers(l1, l2):
    dummy_head = ListNode(0)
    current = dummy_head
    carry = 0
    
    while l1 is not None or l2 is not None or carry != 0:
        val1 = l1.val if l1 is not None else 0
        val2 = l2.val if l2 is not None else 0
        total = val1 + val2 + carry
        
        carry = total // 10
        current.next = ListNode(total % 10)
        current = current.next
        
        if l1 is not None:
            l1 = l1.next
        if l2 is not None:
            l2 = l2.next
    
    return dummy_head.next

# Helper function to create a linked list from a list
def create_linked_list(arr):
    dummy_head = ListNode(0)
    current = dummy_head
    for num in arr:
        current.next = ListNode(num)
        current = current.next
    return dummy_head.next

# Helper function to print a linked list
def print_linked_list(node):
    while node:
        print(node.val, end=" -> " if node.next else "")
        node = node.next
    print()

# Example usage
l1 = create_linked_list([2, 4, 3])
l2 = create_linked_list([5, 6, 4])
result = add_two_numbers(l1, l2)
print_linked_list(result)  # Output: 7 -> 0 -> 8
